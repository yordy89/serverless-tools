AWSTemplateFormatVersion: 2010-09-09
Description: >-
  serverless-tools
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Runtime: nodejs14.x
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 30

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - demo
      - prod
    Description: Stage name

Resources:
  ApiGatewayRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-api
      StageName: !Ref Stage
      Auth:
        DefaultAuthorizer: LambdaAuthorizer
        Authorizers:
          LambdaAuthorizer:
            FunctionPayloadType: TOKEN
            FunctionArn: !GetAtt LambdaAuthorizerFunction.Arn

  GeneratePdfLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Serverless Chrome/Puppeteer Layer
      ContentUri: layers/generate-pdf
      CompatibleRuntimes:
        - nodejs14.x
    Metadata:
      BuildMethod: nodejs14.x

  ApiKeyAuthorizer:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub ${AWS::StackName}-api-key
      Enabled: true
      GenerateDistinctId: false
      StageKeys:
        - RestApiId: !Ref ApiGatewayRestApi
          StageName: !Ref Stage

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGatewayRestApi
          Stage: !Ref Stage
      Quota:
        Limit: 1000
        Period: MONTH
      Throttle:
        BurstLimit: 100
        RateLimit: 100
      UsagePlanName: !Sub ${AWS::StackName}-usage-plan

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKeyAuthorizer
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  LambdaAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/authorizer/
      Handler: authorizer.handler
      Timeout: 60
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Path: /authorizer
            Method: get
      Environment:
        Variables:
          MICROSERVICE_AUTHORIZATION_HOST: !Sub '{{resolve:ssm:microservice_auth_host_${Stage}:1}}'
  generatePdf:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/generatePDF
      Handler: generatePdf.handler
      Description: generate pdf
      Timeout: 60
      MemorySize: 512
      Events:
        Api:
          Type: Api
          Properties:
            Path: /pdf
            Method: post
            RestApiId: !Ref ApiGatewayRestApi
      Layers:
        - !Ref GeneratePdfLayer
      Environment:
        Variables:
          MICROSERVICE_DOCUMENTS_HOST: !Sub '{{resolve:ssm:microservice_documents_host_${Stage}:1}}'

  generatePdfSystem:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/generatePDF
      Handler: generatePdfSystem.handler
      Description: generate pdf from system
      Timeout: 60
      MemorySize: 512
      Events:
        Api:
          Type: Api
          Properties:
            Path: /pdf/system
            Method: post
            RestApiId: !Ref ApiGatewayRestApi
            Auth:
              ApiKeyRequired: true
              Authorizer: NONE
      Layers:
        - !Ref GeneratePdfLayer
      Environment:
        Variables:
          MICROSERVICE_DOCUMENTS_HOST: !Sub '{{resolve:ssm:microservice_documents_host_${Stage}:1}}'

  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: auth

  AuthApiService:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref AuthResource
      PathPart: '{proxy+}'

  AuthAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref AuthApiService
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
          method.request.path.proxy: true
          method.request.header.Authorization: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
            integration.request.path.proxy: "method.request.path.proxy"
            integration.request.header.Authorization: "method.request.header.Authorization"
        Uri: !Sub '{{resolve:ssm:microservice_auth_host_${Stage}:2}}/{proxy}'

  AccountingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: accounting

  AccountingApiService:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref AccountingResource
      PathPart: '{proxy+}'

  AccountingAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref AccountingApiService
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
          method.request.path.proxy: true
          method.request.header.Authorization: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
            integration.request.path.proxy: "method.request.path.proxy"
            integration.request.header.Authorization: "method.request.header.Authorization"
        Uri: !Sub '{{resolve:ssm:microservice_accounting_host_${Stage}:1}}/{proxy}'

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - AuthAnyMethod
      - AccountingAnyMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref Stage

Outputs:
  WebEndpoint:
    Description: 'API Gateway endpoint URL for stage'
    Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/'
