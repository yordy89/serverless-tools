AWSTemplateFormatVersion: 2010-09-09
Description: >-
  serverless-tools
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Runtime: nodejs14.x
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 30

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - demo
      - prod
    Description: Stage name

Conditions:
  IsProd:
    Fn::Equals:
      - !Ref Stage
      - prod

Resources:
  ApiGatewayRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-api
      StageName: !Ref Stage
      Auth:
        DefaultAuthorizer: LambdaAuthorizer
        Authorizers:
          LambdaAuthorizer:
            FunctionPayloadType: TOKEN
            FunctionArn: !GetAtt LambdaAuthorizerFunction.Arn

  GeneratePdfLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Serverless Chrome/Puppeteer Layer
      ContentUri: layers/generate-pdf
      CompatibleRuntimes:
        - nodejs14.x
    Metadata:
      BuildMethod: nodejs14.x

  LambdaAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/authorizer
      Handler: authorizer.handler
      Timeout: 60
      Environment:
        Variables:
          MICROSERVICE_AUTHORIZATION_HOST: !Sub '{{resolve:ssm:microservice_auth_host_${Stage}:1}}'
  generatePdf:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/generatePDF
      Handler: generatePdf.handler
      Description: generate pdf
      Timeout: 60
      MemorySize: 512
      Events:
        Api:
          Type: Api
          Properties:
            Path: /pdf
            Method: post
            RestApiId: !Ref ApiGatewayRestApi
      Layers:
        - !Ref GeneratePdfLayer
      Environment:
        Variables:
          MICROSERVICE_DOCUMENTS_HOST: !Sub '{{resolve:ssm:microservice_documents_host_${Stage}:1}}'

  generatePdfSystem:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/generatePDF
      Handler: generatePdfSystem.handler
      Description: generate pdf from system
      Timeout: 60
      MemorySize: 512
      Events:
        Api:
          Type: Api
          Properties:
            Path: /pdf/system
            Method: post
            RestApiId: !Ref ApiGatewayRestApi
            Auth:
              ApiKeyRequired: true
              Authorizer: NONE
      Layers:
        - !Ref GeneratePdfLayer
      Environment:
        Variables:
          MICROSERVICE_DOCUMENTS_HOST: !Sub '{{resolve:ssm:microservice_documents_host_${Stage}:1}}'

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless website OA'

  FrontendDeployBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub ${AWS::StackName}-tech
      AccessControl: Private

  FrontendDeployBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref FrontendDeployBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Action:
              - 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${FrontendDeployBucket}/*'
            Principal: 
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CloudFrontWAF:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: CloudFrontWAF
      Scope: CLOUDFRONT
      VisibilityConfig:
        CloudWatchMetricsEnabled: false
        MetricName: !Sub ${AWS::StackName}-ACL
        SampledRequestsEnabled: false
      DefaultAction:
        Allow: {}
      Rules:
        - Name: MySqlInjectionRule
          Priority: 1
          Statement:
            SqliMatchStatement:
              FieldToMatch:
                UriPath: {}
              TextTransformations:
                - Type: LOWERCASE
                  Priority: 1
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub ${AWS::StackName}-MySqlInjectionRule
          Action:
            Block: {}
        - Name: MyXssRule
          Priority: 2
          Statement:
            XssMatchStatement:
              FieldToMatch:
                UriPath: {}
              TextTransformations:
                - Type: LOWERCASE
                  Priority: 1
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub ${AWS::StackName}-MyXssRule
          Action:
            Block: {}
    Condition: IsProd

  CloudfrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    DependsOn:
      - CloudFrontOriginAccessIdentity
      - FrontendDeployBucket
    Properties:
      DistributionConfig:
        Comment: 'Cloudfront distribution for buychain ${Stage}'
        DefaultRootObject: 'index.html'
        PriceClass: PriceClass_100
        Enabled: true
        HttpVersion: http2
        Origins:
          - Id: !Sub ${AWS::StackName}-frontend
            DomainName: !GetAtt FrontendDeployBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        DefaultCacheBehavior:
          Compress: true
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: !Sub ${AWS::StackName}-frontend
          ViewerProtocolPolicy: !If
            - IsProd
            - redirect-to-https
            - allow-all
        WebACLId: !If
          - IsProd
          - !GetAtt CloudFrontWAF.Arn
          - !Ref AWS::NoValue
      Tags:
        - Key: Environment
          Value: !Ref Stage

  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: auth

  AuthApiService:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref AuthResource
      PathPart: '{proxy+}'

  AuthAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref AuthApiService
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
        method.request.path.proxy: true
        method.request.header.Authorization: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
          integration.request.header.Authorization: 'method.request.header.Authorization'
        Uri: !Sub '{{resolve:ssm:microservice_auth_host_${Stage}:1}}/{proxy}'

  AccountingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: accounting

  AccountingApiService:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref AccountingResource
      PathPart: '{proxy+}'

  AccountingAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref AccountingApiService
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
        method.request.path.proxy: true
        method.request.header.Authorization: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
          integration.request.header.Authorization: 'method.request.header.Authorization'
        Uri: !Sub '{{resolve:ssm:microservice_accounting_host_${Stage}:1}}/{proxy}'

  BaseApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: base

  BaseApiService:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref BaseApiResource
      PathPart: '{proxy+}'

  BaseApiAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref BaseApiService
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
        method.request.path.proxy: true
        method.request.header.Authorization: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
          integration.request.header.Authorization: 'method.request.header.Authorization'
        Uri: !Sub '{{resolve:ssm:microservice_base_host_${Stage}:1}}/{proxy}'

  DocumentsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: documents

  DocumentsApiService:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref DocumentsResource
      PathPart: '{proxy+}'

  DocumentsAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref DocumentsApiService
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
        method.request.path.proxy: true
        method.request.header.Authorization: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
          integration.request.header.Authorization: 'method.request.header.Authorization'
        Uri: !Sub '{{resolve:ssm:microservice_documents_host_${Stage}:1}}/{proxy}'

  SearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: search

  SearchApiService:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref SearchResource
      PathPart: '{proxy+}'

  SearchAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref SearchApiService
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
        method.request.path.proxy: true
        method.request.header.Authorization: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
          integration.request.header.Authorization: 'method.request.header.Authorization'
        Uri: !Sub '{{resolve:ssm:microservice_search_host_${Stage}:1}}/{proxy}'

  MediaResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: media

  MediaApiService:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref MediaResource
      PathPart: '{proxy+}'

  MediaAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref MediaApiService
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
        method.request.path.proxy: true
        method.request.header.Authorization: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
          integration.request.header.Authorization: 'method.request.header.Authorization'
        Uri: !Sub '{{resolve:ssm:microservice_media_host_${Stage}:1}}/{proxy}'

  ReportsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: reports

  ReportsApiService:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref ReportsResource
      PathPart: '{proxy+}'

  ReportsAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ReportsApiService
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
        method.request.path.proxy: true
        method.request.header.Authorization: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
          integration.request.header.Authorization: 'method.request.header.Authorization'
        Uri: !Sub '{{resolve:ssm:microservice_reports_host_${Stage}:1}}/{proxy}'

  AttachmentsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: attachments

  AttachmentsApiService:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref AttachmentsResource
      PathPart: '{proxy+}'

  AttachmentsAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref AttachmentsApiService
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
        method.request.path.proxy: true
        method.request.header.Authorization: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
          integration.request.header.Authorization: 'method.request.header.Authorization'
        Uri: !Sub '{{resolve:ssm:microservice_attachments_host_${Stage}:1}}/{proxy}'

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - AuthAnyMethod
      - AccountingAnyMethod
      - BaseApiAnyMethod
      - DocumentsAnyMethod
      - SearchAnyMethod
      - MediaAnyMethod
      - ReportsAnyMethod
      - AttachmentsAnyMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref Stage

Outputs:
  WebEndpoint:
    Description: 'API Gateway endpoint URL for stage'
    Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/'
